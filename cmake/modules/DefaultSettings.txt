############################################################################
#
# Copyright 2012 BMW Car IT GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
############################################################################

#==============================================================================
# set default build type, if not defined by user
#==============================================================================
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING
                         "Choose build type: Debug, Release, RelWithDebInfo, MinSizeRel."
                         FORCE)
    message(STATUS "Build type not defined. Using default build type 'Release'.")
endif (NOT CMAKE_BUILD_TYPE)

#==============================================================================
# define shared library build mode
#==============================================================================
if (WITH_STATIC_LIBRARIES)
    set (LIBRARY_BUILDMODE "STATIC")
else (WITH_STATIC_LIBRARIES)
    set (LIBRARY_BUILDMODE "SHARED")
endif (WITH_STATIC_LIBRARIES)


#==============================================================================
# default compiler flags (and why we set them)
#
# -fPIC                     enable position independent code. required for
#                           (at least) Linux 64bit builds
#
# -Wno-variadic-macros      required by google test framework
#
# -Wno-sign-compare         required by google test framework
#
# -Wall                     enable all default compiler warnings
#
# -Wextra                   enable more strict compiler warnings
#
# -Wpedantic                enable ISO C++ compliance warnings, aims for
#                           best portability
#
# -Wno-long-long            ISO C++ does not provide long long support,
#                           but the use of long long is a widely accepted
#                           solution
#
# -Wno-unused-function      LayerManagement has a function, that is not used by
#                           reference plugins, which turns into a warning
#                           during compilation. This function can be used by
#                           other implementations and will stay in the code.
#==============================================================================
set (COMPILER_FLAGS_3RDPARTY "-fPIC -Wno-variadic-macros -Wno-sign-compare")
set (COMPILER_FLAGS_TEST     "-fPIC -Wno-variadic-macros -Wno-sign-compare")
set (COMPILER_FLAGS_EXAMPLE  "-fPIC -Wall -Wextra")
set (COMPILER_FLAGS_PLUGIN   "-fPIC -Wall -Wextra -pedantic -Wno-long-long -Wno-unused-function")
set (COMPILER_FLAGS_CORE     "-fPIC -Wall -Wextra -pedantic -Wno-long-long -Wno-unused-function")


#==============================================================================
# set default build parameters
#==============================================================================
include_directories(
    ${CMAKE_SOURCE_DIR}/config
    ${CMAKE_SOURCE_DIR}/3rdParty
    ${CMAKE_SOURCE_DIR}/LayerManagerClient/ilmCommon/include
)


#==============================================================================
# Internal global settings not available to user
#==============================================================================
set (STATICALLY_LINKED_PLUGINS "" CACHE INTERNAL "list of static plugins")
set (BUILD_FLAG_LIST           "" CACHE INTERNAL "list of build flag names")
set (BUILD_FLAG_ARRAY          "" CACHE INTERNAL "array of build flags for logging")


#==============================================================================
# cppcheck configuration
#==============================================================================
set (CPPCHECK_CONFIG
    --quiet
    --enable=performance,portability
    --template='{file}:{line}: warning: {message} [{severity}]'
)

FOREACH (ARG ${CPPCHECK_CONFIG})
    set (CPPCHECK_CONFIG_STRING "${CPPCHECK_CONFIG_STRING} ${ARG}")
ENDFOREACH(ARG)

