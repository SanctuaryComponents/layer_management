/***************************************************************************
 *
 * Copyright 2010,2011 BMW Car IT GmbH
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ****************************************************************************/

#ifndef _SURFACE_H_
#define _SURFACE_H_

#include "GraphicalSurface.h"
#include <stdlib.h>
#include "PlatformSurface.h"
#include "PixelFormat.h"

/**
 * Represents a graphical surface generated by an application. Always contained in layers.
 */
class Surface: public GraphicalSurface
{

public:
    PixelFormat getPixelFormat() const
    {
        return m_pixformat;
    }

    void setPixelFormat(PixelFormat pf)
    {
        m_pixformat = pf;
    }

    unsigned int getContainingLayerId() const
    {
        return m_layerId;
    }

    void setContainingLayerId(unsigned int id)
    {
        m_layerId = id;
    }

    bool hasNativeContent() const
    {
        return m_hasNativeContent;
    }

    void setNativeContent(long nativeHandle)
    {
        if (!hasNativeContent())
        {
            m_nativeHandle = nativeHandle;
            m_hasNativeContent = true;
        }
    }

    long getNativeContent() const
    {
        return hasNativeContent() ? m_nativeHandle : -1;
    }

    /**
     * Platform specific Object containing surface information specific to a used platform.
     * This typically contains a native window handle/surface handle or information only used
     * by a specific renderer.unsigned
     */
    PlatformSurface *platform; // platform/rendering specific window attributes

    int frameCounter;

private:
    Surface()
    : GraphicalSurface(TypeSurface)
    , platform(NULL)
    , frameCounter(0)
    , m_layerId(INVALID_ID)
    , m_hasNativeContent(false)
    {
    }

    Surface(int id)
    : GraphicalSurface(id, TypeSurface)
    , platform(NULL)
    , frameCounter(0)
    , m_layerId(INVALID_ID)
    , m_hasNativeContent(false)
    {
    }

    friend class Scene;

    long m_nativeHandle;
    PixelFormat m_pixformat;
    unsigned int m_layerId;
    bool m_hasNativeContent;
};

#endif /* _SURFACE_H_ */
